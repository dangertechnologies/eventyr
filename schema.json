type Achievement {
  author: User!
  basePoints: Int!
  category: Category!
  expires: Int
  hasParents: Boolean!
  icon: String!
  id: ID!
  isGlobal: Boolean!
  isMultiPlayer: Boolean!
  longDescription: String
  mode: Mode!
  name: String!
  objectives: [Objective!]!
  points: Float!
  requestReview: Boolean!
  shortDescription: String!
  type: Type!
}

# The connection type for Achievement.
type AchievementConnection {
  # A list of edges.
  edges: [AchievementEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type AchievementEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Achievement
}

type Category {
  icon: String!
  id: ID!
  title: String!
}

# The connection type for Category.
type CategoryConnection {
  # A list of edges.
  edges: [CategoryEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type CategoryEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Category
}

type Continent {
  id: ID!
  name: String!
  regions: [Region!]!
}

# The connection type for Continent.
type ContinentConnection {
  # A list of edges.
  edges: [ContinentEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type ContinentEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Continent
}

type Country {
  id: ID!
  name: String!
  region: Region!
}

# The connection type for Country.
type CountryConnection {
  # A list of edges.
  edges: [CountryEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type CountryEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Country
}

union Goal = Location

type Icon {
  id: ID!
  name: String!
}

# The connection type for Icon.
type IconConnection {
  # A list of edges.
  edges: [IconEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type IconEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Icon
}

type Location {
  altitude: Float!
  country: Country!
  createdAt: Int!
  id: ID!
  isCircular: Boolean!
  lat: Float!
  lng: Float!
  title: String
}

type Mode {
  description: String!
  icon: String!
  id: ID!
  multiplier: Float!
  name: String!
}

# The connection type for Mode.
type ModeConnection {
  # A list of edges.
  edges: [ModeEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type ModeEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Mode
}

type Mutation {
  # An example field added by the generator
  testField: String!
}

type Objective {
  achievements: [Achievement!]!
  basePoints: Float!
  createdAt: Int!
  goal: Goal
  goalType: String!
  hashIdentifier: String!
  isPublic: Boolean!
  requiredCount: Int
  tagline: String!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, the cursor to continue.
  endCursor: String

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String
}

type Query {
  achievements(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String
    category: Int

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    mode: Int
    multiplayer: Boolean
    near: [Float!]
    type: Int
  ): AchievementConnection!
  categories(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): CategoryConnection!
  continents(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    search: String
  ): ContinentConnection!
  countries(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    search: String
  ): CountryConnection!
  icons(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): IconConnection!
  modes(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): ModeConnection!
  regions(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    search: String
  ): RegionConnection!
  types(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): TypeConnection!
}

type Region {
  continent: Continent!
  countries: [Country!]!
  id: ID!
  name: String!
}

# The connection type for Region.
type RegionConnection {
  # A list of edges.
  edges: [RegionEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type RegionEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Region
}

type Role {
  createdAt: Int!
  id: ID!
  name: String!
  permissionLevel: String!
  users: [User!]
}

type Type {
  description: String!
  icon: String!
  id: ID!
  name: String!
  points: Int!
}

# The connection type for Type.
type TypeConnection {
  # A list of edges.
  edges: [TypeEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type TypeEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Type
}

type Unlocked {
  achievement: Achievement!
  coop: Boolean!
  coopBonus: Float!
  id: ID!
  points: Float!
  repetitionCount: Int!
  user: User!
}

type User {
  country: Country!
  email: String!
  id: ID!
  name: String!
  personalPoints: Float!
  points: Float!
  role: Role!
  unlocked: [Unlocked!]!
}