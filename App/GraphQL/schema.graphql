# Autogenerated input type of AcceptCoop
input AcceptCoopInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: String!
}

# Autogenerated return type of AcceptCoop
type AcceptCoopPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  coopRequest: CoopRequest
  errors: [String!]!
}

# Autogenerated input type of AcceptFriend
input AcceptFriendInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # Friend request ID to accept
  id: String!
}

# Autogenerated return type of AcceptFriend
type AcceptFriendPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: [String!]!
  friend: User!
  friendRequest: FriendRequest
  user: User!
}

type Achievement {
  author: User!
  basePoints: Int!
  category: Category!
  expires: Int
  fullDescription: String
  hasParents: Boolean!
  icon: Icon!
  id: ID!
  isGlobal: Boolean!
  isMultiPlayer: Boolean!
  isSuggestedGlobal: Boolean!
  kind: Kind!
  mode: Mode!
  name: String!
  objectives: [Objective!]!
  points: Float!
  shortDescription: String!
}

# The connection type for Achievement.
type AchievementConnection {
  # A list of edges.
  edges: [AchievementEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type AchievementEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Achievement
}

# Autogenerated input type of AddFriend
input AddFriendInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  message: String

  # User to send a friend request to
  userId: String!
}

# Autogenerated return type of AddFriend
type AddFriendPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: [String!]!
  friendRequest: FriendRequest
  user: User!
}

# Autogenerated input type of AddToList
input AddToListInput {
  achievementIds: [String!]!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # ID of the list to add achievements to
  id: String!
}

# Autogenerated return type of AddToList
type AddToListPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: [String!]!
  list: List
}

# Autogenerated input type of AuthenticateUser
input AuthenticateUserInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: String!
}

# Autogenerated return type of AuthenticateUser
type AuthenticateUserPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: [String!]!
  user: User
}

type Category {
  icon: String!
  id: ID!
  points: Int!
  title: String!
}

# The connection type for Category.
type CategoryConnection {
  # A list of edges.
  edges: [CategoryEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type CategoryEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Category
}

# Autogenerated input type of CompleteObjective
input CompleteObjectiveInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  coordinates: [Float!]
  id: String!
  timestamp: Int!
}

# Autogenerated return type of CompleteObjective
type CompleteObjectivePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: [String!]!
  objectiveProgress: ObjectiveProgress
  unlockedAchievements: [Unlocked!]
}

type Continent {
  id: ID!
  name: String!
  regions: [Region!]!
}

# The connection type for Continent.
type ContinentConnection {
  # A list of edges.
  edges: [ContinentEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type ContinentEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Continent
}

type CoopRequest {
  achievement: Achievement
  createdAt: Int!
  id: ID!
  isComplete: Boolean!
  isPending: Boolean!
  list: List
  target: User!
  updatedAt: Int!
  user: User!
}

type Country {
  id: ID!
  name: String!
  region: Region!
}

# The connection type for Country.
type CountryConnection {
  # A list of edges.
  edges: [CountryEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type CountryEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Country
}

# Autogenerated input type of Create
input CreateInput {
  categoryId: Int!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  description: String!
  icon: Icon!
  mode: Mode!
  name: String!
  objectives: [ObjectiveInput!]!
}

# Autogenerated input type of CreateList
input CreateListInput {
  # List of Achievement IDs to add to the list
  achievementIds: [String!]

  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # Whether or not this list should be visible for other users
  isPublic: Boolean = false

  # Name of the list
  title: String!
}

# Autogenerated return type of CreateList
type CreateListPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: [String!]!
  list: List
}

# Autogenerated return type of Create
type CreatePayload {
  achievement: Achievement

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: [String!]!
}

# Autogenerated input type of Delete
input DeleteInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: String!
}

# Autogenerated return type of Delete
type DeletePayload {
  achievement: Achievement

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: [String!]!
  objectives: [Objective!]
}

# Autogenerated input type of Downvote
input DownvoteInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: String!
}

# Autogenerated return type of Downvote
type DownvotePayload {
  achievement: Achievement

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: [String!]!
}

type FriendRequest {
  createdAt: Int!
  fromUser: User!
  id: ID!
  message: String!
  toUser: User!
  updatedAt: Int!
}

enum Icon {
  # airballoon
  AIRBALLOON

  # airport
  AIRPORT

  # anchor
  ANCHOR

  # anvil
  ANVIL

  # baby-buggy
  BABY_BUGGY

  # bank
  BANK

  # barcode-scan
  BARCODE_SCAN

  # baseball
  BASEBALL

  # basketball
  BASKETBALL

  # beach
  BEACH

  # bike
  BIKE

  # binoculars
  BINOCULARS

  # bone
  BONE

  # boombox
  BOOMBOX

  # bowling
  BOWLING

  # bow-tie
  BOW_TIE

  # brain
  BRAIN

  # bridge
  BRIDGE

  # briefcase
  BRIEFCASE

  # buddhism
  BUDDHISM

  # bus
  BUS

  # bus-clock
  BUS_CLOCK

  # bus-double-decker
  BUS_DOUBLE_DECKER

  # cake
  CAKE

  # cake-variant
  CAKE_VARIANT

  # camera
  CAMERA

  # camera-iris
  CAMERA_IRIS

  # candle
  CANDLE

  # candycane
  CANDYCANE

  # car
  CAR

  # caravan
  CARAVAN

  # cards
  CARDS

  # cards-club
  CARDS_CLUB

  # cards-diamond
  CARDS_DIAMOND

  # cards-heart
  CARDS_HEART

  # cards-outline
  CARDS_OUTLINE

  # cards-spade
  CARDS_SPADE

  # carrot
  CARROT

  # car-convertible
  CAR_CONVERTIBLE

  # car-limousine
  CAR_LIMOUSINE

  # cash
  CASH

  # cassette
  CASSETTE

  # castle
  CASTLE

  # cat
  CAT

  # cctv
  CCTV

  # ceiling-light
  CEILING_LIGHT

  # certificate
  CERTIFICATE

  # chess-knight
  CHESS_KNIGHT

  # chili-hot
  CHILI_HOT

  # chili-mild
  CHILI_MILD

  # chip
  CHIP

  # christianity
  CHRISTIANITY

  # church
  CHURCH

  # city
  CITY

  # cloud
  CLOUD

  # coffee
  COFFEE

  # coffee-outline
  COFFEE_OUTLINE

  # coffee-to-go
  COFFEE_TO_GO

  # cookie
  COOKIE

  # corn
  CORN

  # cow
  COW

  # crane
  CRANE

  # creation
  CREATION

  # cube-outline
  CUBE_OUTLINE

  # cube-send
  CUBE_SEND

  # cup
  CUP

  # duck
  DUCK

  # dumbbell
  DUMBBELL

  # earth
  EARTH

  # elevator
  ELEVATOR

  # escalator
  ESCALATOR

  # face
  FACE

  # factory
  FACTORY

  # fan
  FAN

  # feather
  FEATHER

  # fire-truck
  FIRE_TRUCK

  # fish
  FISH

  # flag-variant
  FLAG_VARIANT

  # flower
  FLOWER

  # football-helmet
  FOOTBALL_HELMET

  # forklift
  FORKLIFT

  # fountain
  FOUNTAIN

  # gift
  GIFT

  # golf
  GOLF

  # gondola
  GONDOLA

  # hammer
  HAMMER

  # hanger
  HANGER

  # headphones
  HEADPHONES

  # hook
  HOOK

  # human-female
  HUMAN_FEMALE

  # human-male
  HUMAN_MALE

  # human-male-female
  HUMAN_MALE_FEMALE

  # ice-cream
  ICE_CREAM

  # incognito
  INCOGNITO

  # infinity
  INFINITY

  # islam
  ISLAM

  # judaism
  JUDAISM

  # key-variant
  KEY_VARIANT

  # knife-military
  KNIFE_MILITARY

  # ladybug
  LADYBUG

  # lamp
  LAMP

  # lead-pencil
  LEAD_PENCIL

  # leaf
  LEAF

  # lifebuoy
  LIFEBUOY

  # map-outline
  MAP_OUTLINE

  # matrix
  MATRIX

  # motorbike
  MOTORBIKE

  # muffin
  MUFFIN

  # music
  MUSIC

  # ninja
  NINJA

  # oil
  OIL

  # owl
  OWL

  # palette
  PALETTE

  # panda
  PANDA

  # pickaxe
  PICKAXE

  # pier-crane
  PIER_CRANE

  # pig
  PIG

  # pill
  PILL

  # pillar
  PILLAR

  # pine-tree
  PINE_TREE

  # pipe
  PIPE

  # pokeball
  POKEBALL

  # poker-chip
  POKER_CHIP

  # pool
  POOL

  # popcorn
  POPCORN

  # qrcode-scan
  QRCODE_SCAN

  # restaurant
  RESTAURANT

  # road-variant
  ROAD_VARIANT

  # rocket
  ROCKET

  # routes
  ROUTES

  # run
  RUN

  # scale
  SCALE

  # scale-balance
  SCALE_BALANCE

  # seat-individual-suite
  SEAT_INDIVIDUAL_SUITE

  # shower
  SHOWER

  # sign-direction
  SIGN_DIRECTION

  # snowflake
  SNOWFLAKE

  # snowman
  SNOWMAN

  # soccer
  SOCCER

  # spray
  SPRAY

  # stadium
  STADIUM

  # summit
  SUMMIT

  # sunglasses
  SUNGLASSES

  # swim
  SWIM

  # sword
  SWORD

  # taxi
  TAXI

  # tennis
  TENNIS

  # tent
  TENT

  # tie
  TIE

  # toilet
  TOILET

  # tooth
  TOOTH

  # tractor
  TRACTOR

  # train
  TRAIN

  # tram
  TRAM

  # tshirt-crew
  TSHIRT_CREW

  # van-utility
  VAN_UTILITY

  # voice
  VOICE

  # watch
  WATCH

  # water
  WATER

  # weather-sunset
  WEATHER_SUNSET

  # worker
  WORKER

  # yin-yang
  YIN_YANG
}

enum Kind {
  # 25
  ACTION

  # 35
  DISCOVERY

  # 15
  LOCATION

  # 50
  ROUTE
}

type List {
  achievements: [Achievement!]
  id: ID!
  isPublic: Boolean!
  lists: [List!]
  title: String!
  user: User!
}

enum Mode {
  # 15
  DIFFICULT

  # 5
  EASY

  # 20
  EXTREME

  # 10
  NORMAL
}

type Mutation {
  #     Accepts a cooperation request by setting pending: false. Rejected
  #     coop requests are deleted, so if a coop request has pending: false,
  #     it's an active cooperation link between two users
  acceptCoop(input: AcceptCoopInput!): AcceptCoopPayload

  #     Identifies and accepts a friend request by id. The friend request
  #     will be deleted, and the sender will be added to the user's friends.
  #     Make sure to query for the friends connection, or the friend field,
  #     and update the connection on the client.
  acceptFriend(input: AcceptFriendInput!): AcceptFriendPayload

  #   Identifies and adds a friend request by id. The friend request
  #   will be deleted, and the sender will be added to the user's friends.
  #   Make sure to query for the friends connection, or the friend field,
  #   and update the connection on the client.
  addFriend(input: AddFriendInput!): AddFriendPayload

  #     Adds achievements to an existing list. User can only add
  #     achievements to a list if a) the user owns it or b) the
  #     list has been shared with the user and the user has been
  #     granted access rights.
  addToList(input: AddToListInput!): AddToListPayload
  authenticateUser(input: AuthenticateUserInput!): AuthenticateUserPayload

  #     Complete, or partially complete, an objective. 
  #     Objectives that must be completed multiple times will have their counter
  #     incremented, and will become completed once the required completion count
  #     is met.
  #     Any achievements that become unlocked by completing this objective will
  #     also be returned.
  completeObjective(input: CompleteObjectiveInput!): CompleteObjectivePayload
  createAchievement(input: CreateInput!): CreatePayload

  #     Creates a new user-owned list, optionally
  #     populated by Achievements (but can be empty initially as well)
  createList(input: CreateListInput!): CreateListPayload
  deleteAchievement(input: DeleteInput!): DeletePayload
  downvote(input: DownvoteInput!): DownvotePayload

  #       Automatically refreshes suggested Achievements by removing currently suggested Achievements (not Pinned/Favorited)
  #       that are too far away from the current location, and repopulates the
  # users suggested Achievements with all Achievement within range.
  #       The User could choose to do this manually by searching for nearby
  # achievements, or view suggested Achievements, after 
  #       this mutation is called automatically.
  refreshSuggested(input: RefreshSuggestedInput!): RefreshSuggestedPayload

  #     Declines a cooperation request by removing it. Rejected
  #     coop requests are deleted, while accepted cooperation requests
  #     set pending: false.
  rejectCoop(input: RejectCoopInput!): RejectCoopPayload

  #   Identifies and rejects a friend request by id. The friend request
  #   will be deleted, so make sure to query for the friends connection
  #   and update it on the client.
  #   This can also be used to cancel a friend request, by rejecting
  #   the users own (sent) friend requests.
  rejectFriend(input: RejectFriendInput!): RejectFriendPayload

  # Removes friendship with a user specified by user ID
  removeFriend(input: RemoveFriendInput!): RemoveFriendPayload

  #   Removes achievements to an existing list. User can only remove
  #   achievements from a list if a) the user owns it or b) the
  #   list has been shared with the user and the user has been
  #   granted access rights.
  removeFromList(input: RemoveFromListInput!): RemoveFromListPayload

  #     Requests cooperation mode with another user, either for an entire List,
  #     or for a single achievement
  requestCoop(input: RequestCoopInput!): RequestCoopPayload
  updateAchievement(input: UpdateInput!): UpdatePayload

  #   Update name / public status of a list
  updateList(input: UpdateListInput!): UpdateListPayload
  upvote(input: UpvoteInput!): UpvotePayload
}

type Objective {
  achievements: [Achievement!]
  altitude: Float
  basePoints: Float!
  country: Country
  createdAt: Int!
  hashIdentifier: String!
  id: ID!
  isPublic: Boolean!
  kind: String!
  lat: Float
  lng: Float
  requiredCount: Int
  tagline: String!
}

# The connection type for Objective.
type ObjectiveConnection {
  # A list of edges.
  edges: [ObjectiveEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type ObjectiveEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Objective
}

input ObjectiveInput {
  basePoints: Float!
  country: String
  id: String
  kind: String!
  lat: Float
  lng: Float
  requiredCount: Int
  tagline: String!
}

type ObjectiveProgress {
  completed: Boolean!
  createdAt: Int!
  id: ID!
  objective: Objective!
  timesCompleted: Boolean!
  updatedAt: Int!
  user: User!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, the cursor to continue.
  endCursor: String

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String
}

type Query {
  achievement(id: String!): Achievement
  achievements(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String
    category: Int

    # Returns the first _n_ elements from the list.
    first: Int
    kind: String = "ALL"

    # Returns the last _n_ elements from the list.
    last: Int
    mode: Int
    multiplayer: Boolean
    near: [Float!]
    type: Int
  ): AchievementConnection!
  categories(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): CategoryConnection!
  continents(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    search: String
  ): ContinentConnection!
  countries(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    search: String
  ): CountryConnection!
  currentUser: User!
  icons: [Icon!]!
  kinds: [Kind!]!
  modes: [Mode!]!
  objectives(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    near: [Float!]
  ): ObjectiveConnection!
  regions(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    search: String
  ): RegionConnection!
  user(id: String!): User!
}

# Autogenerated input type of RefreshSuggested
input RefreshSuggestedInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  coordinates: [Float!]
}

# Autogenerated return type of RefreshSuggested
type RefreshSuggestedPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: [String!]!
  suggested: [Achievement!]
}

type Region {
  continent: Continent!
  countries: [Country!]!
  id: ID!
  name: String!
}

# The connection type for Region.
type RegionConnection {
  # A list of edges.
  edges: [RegionEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type RegionEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Region
}

# Autogenerated input type of RejectCoop
input RejectCoopInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: String!
}

# Autogenerated return type of RejectCoop
type RejectCoopPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  coopRequest: CoopRequest
  errors: [String!]!
}

# Autogenerated input type of RejectFriend
input RejectFriendInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # Friend request ID to Reject
  id: String!
}

# Autogenerated return type of RejectFriend
type RejectFriendPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: [String!]!
  friend: User!
  friendRequest: FriendRequest
  user: User!
}

# Autogenerated input type of RemoveFriend
input RemoveFriendInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  userId: String!
}

# Autogenerated return type of RemoveFriend
type RemoveFriendPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: [String!]!

  # Current user
  user: User
}

# Autogenerated input type of RemoveFromList
input RemoveFromListInput {
  # Achievements to remove
  achievementIds: [String!]!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # ID of the list to remove achievements from
  id: String!
}

# Autogenerated return type of RemoveFromList
type RemoveFromListPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: [String!]!
  list: List
}

# Autogenerated input type of RequestCoop
input RequestCoopInput {
  # Achievement to request coop for
  achievementId: String

  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # List to request coop for
  listId: String

  # User to send request to
  userId: String!
}

# Autogenerated return type of RequestCoop
type RequestCoopPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  coopRequest: CoopRequest
  errors: [String!]!
}

type Role {
  createdAt: Int!
  id: ID!
  name: String!
  permissionLevel: String!
  users: [User!]
}

type Unlocked {
  achievement: Achievement!
  coop: Boolean!
  coopBonus: Float!
  createdAt: Int!
  id: ID!
  points: Float!
  repetitionCount: Int!
  user: User!
}

# The connection type for Unlocked.
type UnlockedConnection {
  # A list of edges.
  edges: [UnlockedEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type UnlockedEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Unlocked
}

# Autogenerated input type of Update
input UpdateInput {
  categoryId: Int!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  description: String!
  icon: String!
  id: String!
  mode: Mode!
  name: String!
  objectives: [ObjectiveInput!]!
}

# Autogenerated input type of UpdateList
input UpdateListInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # ID of the list to update
  id: String!

  # Whether or not this list should be visible for other users
  isPublic: Boolean = false

  # Name of the list
  title: String!
}

# Autogenerated return type of UpdateList
type UpdateListPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: [String!]!
  list: List
}

# Autogenerated return type of Update
type UpdatePayload {
  achievement: Achievement

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: [String!]!
}

# Autogenerated input type of Upvote
input UpvoteInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: String!
}

# Autogenerated return type of Upvote
type UpvotePayload {
  achievement: Achievement

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: [String!]!
}

type User {
  coopPoints: Int!
  country: Country!
  email: String!
  id: ID!
  name: String!
  personalPoints: Float!
  points: Float!
  role: Role!
  unlockedAchievements(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): UnlockedConnection!
  unlockedCount: Int!
  userAchievements(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): AchievementConnection!
}