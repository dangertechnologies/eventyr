export const typeDefs = ["# Autogenerated input type of AcceptCoop\ninput AcceptCoopInput {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  id: String!\n}\n\n# Autogenerated return type of AcceptCoop\ntype AcceptCoopPayload {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  coopRequest: CoopRequest\n  errors: [String!]!\n}\n\n# Autogenerated input type of AcceptFriend\ninput AcceptFriendInput {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n\n  # Friend request ID to accept\n  id: String!\n}\n\n# Autogenerated return type of AcceptFriend\ntype AcceptFriendPayload {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  errors: [String!]!\n  friend: User!\n  friendRequest: FriendRequest\n  user: User!\n}\n\ntype Achievement {\n  author: User!\n  basePoints: Int!\n  category: Category!\n  expires: Int\n  fullDescription: String\n  hasParents: Boolean!\n  icon: Icon!\n  id: ID!\n  isGlobal: Boolean!\n  isMultiPlayer: Boolean!\n  isSuggestedGlobal: Boolean!\n  kind: Kind!\n  mode: Mode!\n  name: String!\n  objectives: [Objective!]!\n  points: Float!\n  shortDescription: String!\n}\n\n# The connection type for Achievement.\ntype AchievementConnection {\n  # A list of edges.\n  edges: [AchievementEdge]\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n}\n\n# An edge in a connection.\ntype AchievementEdge {\n  # A cursor for use in pagination.\n  cursor: String!\n\n  # The item at the end of the edge.\n  node: Achievement\n}\n\n# Autogenerated input type of AddFriend\ninput AddFriendInput {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  message: String\n\n  # User to send a friend request to\n  userId: String!\n}\n\n# Autogenerated return type of AddFriend\ntype AddFriendPayload {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  errors: [String!]!\n  friendRequest: FriendRequest\n  user: User!\n}\n\n# Autogenerated input type of AddToList\ninput AddToListInput {\n  achievementIds: [String!]!\n\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n\n  # ID of the list to add achievements to\n  id: String!\n}\n\n# Autogenerated return type of AddToList\ntype AddToListPayload {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  errors: [String!]!\n  list: List\n}\n\n# Autogenerated input type of AuthenticateUser\ninput AuthenticateUserInput {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  id: String!\n}\n\n# Autogenerated return type of AuthenticateUser\ntype AuthenticateUserPayload {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  errors: [String!]!\n  user: User\n}\n\ntype Category {\n  icon: String!\n  id: ID!\n  points: Int!\n  title: String!\n}\n\n# The connection type for Category.\ntype CategoryConnection {\n  # A list of edges.\n  edges: [CategoryEdge]\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n}\n\n# An edge in a connection.\ntype CategoryEdge {\n  # A cursor for use in pagination.\n  cursor: String!\n\n  # The item at the end of the edge.\n  node: Category\n}\n\n# Autogenerated input type of CompleteObjective\ninput CompleteObjectiveInput {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  coordinates: [Float!]\n  id: String!\n  timestamp: Int!\n}\n\n# Autogenerated return type of CompleteObjective\ntype CompleteObjectivePayload {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  errors: [String!]!\n  objectiveProgress: ObjectiveProgress\n  unlockedAchievements: [Unlocked!]\n}\n\ntype Continent {\n  id: ID!\n  name: String!\n  regions: [Region!]!\n}\n\n# The connection type for Continent.\ntype ContinentConnection {\n  # A list of edges.\n  edges: [ContinentEdge]\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n}\n\n# An edge in a connection.\ntype ContinentEdge {\n  # A cursor for use in pagination.\n  cursor: String!\n\n  # The item at the end of the edge.\n  node: Continent\n}\n\ntype CoopRequest {\n  achievement: Achievement\n  createdAt: Int!\n  id: ID!\n  isComplete: Boolean!\n  isPending: Boolean!\n  list: List\n  target: User!\n  updatedAt: Int!\n  user: User!\n}\n\ntype Country {\n  id: ID!\n  name: String!\n  region: Region!\n}\n\n# The connection type for Country.\ntype CountryConnection {\n  # A list of edges.\n  edges: [CountryEdge]\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n}\n\n# An edge in a connection.\ntype CountryEdge {\n  # A cursor for use in pagination.\n  cursor: String!\n\n  # The item at the end of the edge.\n  node: Country\n}\n\n# Autogenerated input type of Create\ninput CreateInput {\n  categoryId: Int!\n\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  description: String!\n  icon: Icon!\n  mode: Mode!\n  name: String!\n  objectives: [ObjectiveInput!]!\n}\n\n# Autogenerated input type of CreateList\ninput CreateListInput {\n  # List of Achievement IDs to add to the list\n  achievementIds: [String!]\n\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n\n  # Whether or not this list should be visible for other users\n  isPublic: Boolean = false\n\n  # Name of the list\n  title: String!\n}\n\n# Autogenerated return type of CreateList\ntype CreateListPayload {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  errors: [String!]!\n  list: List\n}\n\n# Autogenerated return type of Create\ntype CreatePayload {\n  achievement: Achievement\n\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  errors: [String!]!\n}\n\n# Autogenerated input type of Delete\ninput DeleteInput {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  id: String!\n}\n\n# Autogenerated return type of Delete\ntype DeletePayload {\n  achievement: Achievement\n\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  errors: [String!]!\n  objectives: [Objective!]\n}\n\n# Autogenerated input type of Downvote\ninput DownvoteInput {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  id: String!\n}\n\n# Autogenerated return type of Downvote\ntype DownvotePayload {\n  achievement: Achievement\n\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  errors: [String!]!\n}\n\ntype FriendRequest {\n  createdAt: Int!\n  fromUser: User!\n  id: ID!\n  message: String!\n  toUser: User!\n  updatedAt: Int!\n}\n\nenum Icon {\n  # airballoon\n  AIRBALLOON\n\n  # airport\n  AIRPORT\n\n  # anchor\n  ANCHOR\n\n  # anvil\n  ANVIL\n\n  # baby-buggy\n  BABY_BUGGY\n\n  # bank\n  BANK\n\n  # barcode-scan\n  BARCODE_SCAN\n\n  # baseball\n  BASEBALL\n\n  # basketball\n  BASKETBALL\n\n  # beach\n  BEACH\n\n  # bike\n  BIKE\n\n  # binoculars\n  BINOCULARS\n\n  # bone\n  BONE\n\n  # boombox\n  BOOMBOX\n\n  # bowling\n  BOWLING\n\n  # bow-tie\n  BOW_TIE\n\n  # brain\n  BRAIN\n\n  # bridge\n  BRIDGE\n\n  # briefcase\n  BRIEFCASE\n\n  # buddhism\n  BUDDHISM\n\n  # bus\n  BUS\n\n  # bus-clock\n  BUS_CLOCK\n\n  # bus-double-decker\n  BUS_DOUBLE_DECKER\n\n  # cake\n  CAKE\n\n  # cake-variant\n  CAKE_VARIANT\n\n  # camera\n  CAMERA\n\n  # camera-iris\n  CAMERA_IRIS\n\n  # candle\n  CANDLE\n\n  # candycane\n  CANDYCANE\n\n  # car\n  CAR\n\n  # caravan\n  CARAVAN\n\n  # cards\n  CARDS\n\n  # cards-club\n  CARDS_CLUB\n\n  # cards-diamond\n  CARDS_DIAMOND\n\n  # cards-heart\n  CARDS_HEART\n\n  # cards-outline\n  CARDS_OUTLINE\n\n  # cards-spade\n  CARDS_SPADE\n\n  # carrot\n  CARROT\n\n  # car-convertible\n  CAR_CONVERTIBLE\n\n  # car-limousine\n  CAR_LIMOUSINE\n\n  # cash\n  CASH\n\n  # cassette\n  CASSETTE\n\n  # castle\n  CASTLE\n\n  # cat\n  CAT\n\n  # cctv\n  CCTV\n\n  # ceiling-light\n  CEILING_LIGHT\n\n  # certificate\n  CERTIFICATE\n\n  # chess-knight\n  CHESS_KNIGHT\n\n  # chili-hot\n  CHILI_HOT\n\n  # chili-mild\n  CHILI_MILD\n\n  # chip\n  CHIP\n\n  # christianity\n  CHRISTIANITY\n\n  # church\n  CHURCH\n\n  # city\n  CITY\n\n  # cloud\n  CLOUD\n\n  # coffee\n  COFFEE\n\n  # coffee-outline\n  COFFEE_OUTLINE\n\n  # coffee-to-go\n  COFFEE_TO_GO\n\n  # cookie\n  COOKIE\n\n  # corn\n  CORN\n\n  # cow\n  COW\n\n  # crane\n  CRANE\n\n  # creation\n  CREATION\n\n  # cube-outline\n  CUBE_OUTLINE\n\n  # cube-send\n  CUBE_SEND\n\n  # cup\n  CUP\n\n  # duck\n  DUCK\n\n  # dumbbell\n  DUMBBELL\n\n  # earth\n  EARTH\n\n  # elevator\n  ELEVATOR\n\n  # escalator\n  ESCALATOR\n\n  # face\n  FACE\n\n  # factory\n  FACTORY\n\n  # fan\n  FAN\n\n  # feather\n  FEATHER\n\n  # fire-truck\n  FIRE_TRUCK\n\n  # fish\n  FISH\n\n  # flag-variant\n  FLAG_VARIANT\n\n  # flower\n  FLOWER\n\n  # football-helmet\n  FOOTBALL_HELMET\n\n  # forklift\n  FORKLIFT\n\n  # fountain\n  FOUNTAIN\n\n  # gift\n  GIFT\n\n  # golf\n  GOLF\n\n  # gondola\n  GONDOLA\n\n  # hammer\n  HAMMER\n\n  # hanger\n  HANGER\n\n  # headphones\n  HEADPHONES\n\n  # hook\n  HOOK\n\n  # human-female\n  HUMAN_FEMALE\n\n  # human-male\n  HUMAN_MALE\n\n  # human-male-female\n  HUMAN_MALE_FEMALE\n\n  # ice-cream\n  ICE_CREAM\n\n  # incognito\n  INCOGNITO\n\n  # infinity\n  INFINITY\n\n  # islam\n  ISLAM\n\n  # judaism\n  JUDAISM\n\n  # key-variant\n  KEY_VARIANT\n\n  # knife-military\n  KNIFE_MILITARY\n\n  # ladybug\n  LADYBUG\n\n  # lamp\n  LAMP\n\n  # lead-pencil\n  LEAD_PENCIL\n\n  # leaf\n  LEAF\n\n  # lifebuoy\n  LIFEBUOY\n\n  # map-outline\n  MAP_OUTLINE\n\n  # matrix\n  MATRIX\n\n  # motorbike\n  MOTORBIKE\n\n  # muffin\n  MUFFIN\n\n  # music\n  MUSIC\n\n  # ninja\n  NINJA\n\n  # oil\n  OIL\n\n  # owl\n  OWL\n\n  # palette\n  PALETTE\n\n  # panda\n  PANDA\n\n  # pickaxe\n  PICKAXE\n\n  # pier-crane\n  PIER_CRANE\n\n  # pig\n  PIG\n\n  # pill\n  PILL\n\n  # pillar\n  PILLAR\n\n  # pine-tree\n  PINE_TREE\n\n  # pipe\n  PIPE\n\n  # pokeball\n  POKEBALL\n\n  # poker-chip\n  POKER_CHIP\n\n  # pool\n  POOL\n\n  # popcorn\n  POPCORN\n\n  # qrcode-scan\n  QRCODE_SCAN\n\n  # restaurant\n  RESTAURANT\n\n  # road-variant\n  ROAD_VARIANT\n\n  # rocket\n  ROCKET\n\n  # routes\n  ROUTES\n\n  # run\n  RUN\n\n  # scale\n  SCALE\n\n  # scale-balance\n  SCALE_BALANCE\n\n  # seat-individual-suite\n  SEAT_INDIVIDUAL_SUITE\n\n  # shower\n  SHOWER\n\n  # sign-direction\n  SIGN_DIRECTION\n\n  # snowflake\n  SNOWFLAKE\n\n  # snowman\n  SNOWMAN\n\n  # soccer\n  SOCCER\n\n  # spray\n  SPRAY\n\n  # stadium\n  STADIUM\n\n  # summit\n  SUMMIT\n\n  # sunglasses\n  SUNGLASSES\n\n  # swim\n  SWIM\n\n  # sword\n  SWORD\n\n  # taxi\n  TAXI\n\n  # tennis\n  TENNIS\n\n  # tent\n  TENT\n\n  # tie\n  TIE\n\n  # toilet\n  TOILET\n\n  # tooth\n  TOOTH\n\n  # tractor\n  TRACTOR\n\n  # train\n  TRAIN\n\n  # tram\n  TRAM\n\n  # tshirt-crew\n  TSHIRT_CREW\n\n  # van-utility\n  VAN_UTILITY\n\n  # voice\n  VOICE\n\n  # watch\n  WATCH\n\n  # water\n  WATER\n\n  # weather-sunset\n  WEATHER_SUNSET\n\n  # worker\n  WORKER\n\n  # yin-yang\n  YIN_YANG\n}\n\nenum Kind {\n  # 25\n  ACTION\n\n  # 35\n  DISCOVERY\n\n  # 15\n  LOCATION\n\n  # 50\n  ROUTE\n}\n\ntype List {\n  achievements: [Achievement!]\n  id: ID!\n  isPublic: Boolean!\n  lists: [List!]\n  title: String!\n  user: User!\n}\n\nenum Mode {\n  # 15\n  DIFFICULT\n\n  # 5\n  EASY\n\n  # 20\n  EXTREME\n\n  # 10\n  NORMAL\n}\n\ntype Mutation {\n  #     Accepts a cooperation request by setting pending: false. Rejected\n  #     coop requests are deleted, so if a coop request has pending: false,\n  #     it's an active cooperation link between two users\n  acceptCoop(input: AcceptCoopInput!): AcceptCoopPayload\n\n  #     Identifies and accepts a friend request by id. The friend request\n  #     will be deleted, and the sender will be added to the user's friends.\n  #     Make sure to query for the friends connection, or the friend field,\n  #     and update the connection on the client.\n  acceptFriend(input: AcceptFriendInput!): AcceptFriendPayload\n\n  #   Identifies and adds a friend request by id. The friend request\n  #   will be deleted, and the sender will be added to the user's friends.\n  #   Make sure to query for the friends connection, or the friend field,\n  #   and update the connection on the client.\n  addFriend(input: AddFriendInput!): AddFriendPayload\n\n  #     Adds achievements to an existing list. User can only add\n  #     achievements to a list if a) the user owns it or b) the\n  #     list has been shared with the user and the user has been\n  #     granted access rights.\n  addToList(input: AddToListInput!): AddToListPayload\n  authenticateUser(input: AuthenticateUserInput!): AuthenticateUserPayload\n\n  #     Complete, or partially complete, an objective. \n  #     Objectives that must be completed multiple times will have their counter\n  #     incremented, and will become completed once the required completion count\n  #     is met.\n  #     Any achievements that become unlocked by completing this objective will\n  #     also be returned.\n  completeObjective(input: CompleteObjectiveInput!): CompleteObjectivePayload\n  createAchievement(input: CreateInput!): CreatePayload\n\n  #     Creates a new user-owned list, optionally\n  #     populated by Achievements (but can be empty initially as well)\n  createList(input: CreateListInput!): CreateListPayload\n  deleteAchievement(input: DeleteInput!): DeletePayload\n  downvote(input: DownvoteInput!): DownvotePayload\n\n  #       Automatically refreshes suggested Achievements by removing currently suggested Achievements (not Pinned/Favorited)\n  #       that are too far away from the current location, and repopulates the\n  # users suggested Achievements with all Achievement within range.\n  #       The User could choose to do this manually by searching for nearby\n  # achievements, or view suggested Achievements, after \n  #       this mutation is called automatically.\n  refreshSuggested(input: RefreshSuggestedInput!): RefreshSuggestedPayload\n\n  #     Declines a cooperation request by removing it. Rejected\n  #     coop requests are deleted, while accepted cooperation requests\n  #     set pending: false.\n  rejectCoop(input: RejectCoopInput!): RejectCoopPayload\n\n  #   Identifies and rejects a friend request by id. The friend request\n  #   will be deleted, so make sure to query for the friends connection\n  #   and update it on the client.\n  #   This can also be used to cancel a friend request, by rejecting\n  #   the users own (sent) friend requests.\n  rejectFriend(input: RejectFriendInput!): RejectFriendPayload\n\n  # Removes friendship with a user specified by user ID\n  removeFriend(input: RemoveFriendInput!): RemoveFriendPayload\n\n  #   Removes achievements to an existing list. User can only remove\n  #   achievements from a list if a) the user owns it or b) the\n  #   list has been shared with the user and the user has been\n  #   granted access rights.\n  removeFromList(input: RemoveFromListInput!): RemoveFromListPayload\n\n  #     Requests cooperation mode with another user, either for an entire List,\n  #     or for a single achievement\n  requestCoop(input: RequestCoopInput!): RequestCoopPayload\n  updateAchievement(input: UpdateInput!): UpdatePayload\n\n  #   Update name / public status of a list\n  updateList(input: UpdateListInput!): UpdateListPayload\n  upvote(input: UpvoteInput!): UpvotePayload\n}\n\ntype Objective {\n  achievements: [Achievement!]\n  altitude: Float\n  basePoints: Float!\n  country: Country\n  createdAt: Int!\n  hashIdentifier: String!\n  id: ID!\n  isPublic: Boolean!\n  kind: String!\n  lat: Float\n  lng: Float\n  requiredCount: Int\n  tagline: String!\n}\n\n# The connection type for Objective.\ntype ObjectiveConnection {\n  # A list of edges.\n  edges: [ObjectiveEdge]\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n}\n\n# An edge in a connection.\ntype ObjectiveEdge {\n  # A cursor for use in pagination.\n  cursor: String!\n\n  # The item at the end of the edge.\n  node: Objective\n}\n\ninput ObjectiveInput {\n  basePoints: Float!\n  country: String\n  id: String\n  kind: String!\n  lat: Float\n  lng: Float\n  requiredCount: Int\n  tagline: String!\n}\n\ntype ObjectiveProgress {\n  completed: Boolean!\n  createdAt: Int!\n  id: ID!\n  objective: Objective!\n  timesCompleted: Boolean!\n  updatedAt: Int!\n  user: User!\n}\n\n# Information about pagination in a connection.\ntype PageInfo {\n  # When paginating forwards, the cursor to continue.\n  endCursor: String\n\n  # When paginating forwards, are there more items?\n  hasNextPage: Boolean!\n\n  # When paginating backwards, are there more items?\n  hasPreviousPage: Boolean!\n\n  # When paginating backwards, the cursor to continue.\n  startCursor: String\n}\n\ntype Query {\n  achievement(id: String!): Achievement\n  achievements(\n    # Returns the elements in the list that come after the specified cursor.\n    after: String\n\n    # Returns the elements in the list that come before the specified cursor.\n    before: String\n    category: Int\n\n    # Returns the first _n_ elements from the list.\n    first: Int\n    kind: String = \"ALL\"\n\n    # Returns the last _n_ elements from the list.\n    last: Int\n    mode: Int\n    multiplayer: Boolean\n    near: [Float!]\n    type: Int\n  ): AchievementConnection!\n  categories(\n    # Returns the elements in the list that come after the specified cursor.\n    after: String\n\n    # Returns the elements in the list that come before the specified cursor.\n    before: String\n\n    # Returns the first _n_ elements from the list.\n    first: Int\n\n    # Returns the last _n_ elements from the list.\n    last: Int\n  ): CategoryConnection!\n  continents(\n    # Returns the elements in the list that come after the specified cursor.\n    after: String\n\n    # Returns the elements in the list that come before the specified cursor.\n    before: String\n\n    # Returns the first _n_ elements from the list.\n    first: Int\n\n    # Returns the last _n_ elements from the list.\n    last: Int\n    search: String\n  ): ContinentConnection!\n  countries(\n    # Returns the elements in the list that come after the specified cursor.\n    after: String\n\n    # Returns the elements in the list that come before the specified cursor.\n    before: String\n\n    # Returns the first _n_ elements from the list.\n    first: Int\n\n    # Returns the last _n_ elements from the list.\n    last: Int\n    search: String\n  ): CountryConnection!\n  currentUser: User!\n  icons: [Icon!]!\n  kinds: [Kind!]!\n  modes: [Mode!]!\n  objectives(\n    # Returns the elements in the list that come after the specified cursor.\n    after: String\n\n    # Returns the elements in the list that come before the specified cursor.\n    before: String\n\n    # Returns the first _n_ elements from the list.\n    first: Int\n\n    # Returns the last _n_ elements from the list.\n    last: Int\n    near: [Float!]\n  ): ObjectiveConnection!\n  regions(\n    # Returns the elements in the list that come after the specified cursor.\n    after: String\n\n    # Returns the elements in the list that come before the specified cursor.\n    before: String\n\n    # Returns the first _n_ elements from the list.\n    first: Int\n\n    # Returns the last _n_ elements from the list.\n    last: Int\n    search: String\n  ): RegionConnection!\n  user(id: String!): User!\n}\n\n# Autogenerated input type of RefreshSuggested\ninput RefreshSuggestedInput {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  coordinates: [Float!]\n}\n\n# Autogenerated return type of RefreshSuggested\ntype RefreshSuggestedPayload {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  errors: [String!]!\n  suggested: [Achievement!]\n}\n\ntype Region {\n  continent: Continent!\n  countries: [Country!]!\n  id: ID!\n  name: String!\n}\n\n# The connection type for Region.\ntype RegionConnection {\n  # A list of edges.\n  edges: [RegionEdge]\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n}\n\n# An edge in a connection.\ntype RegionEdge {\n  # A cursor for use in pagination.\n  cursor: String!\n\n  # The item at the end of the edge.\n  node: Region\n}\n\n# Autogenerated input type of RejectCoop\ninput RejectCoopInput {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  id: String!\n}\n\n# Autogenerated return type of RejectCoop\ntype RejectCoopPayload {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  coopRequest: CoopRequest\n  errors: [String!]!\n}\n\n# Autogenerated input type of RejectFriend\ninput RejectFriendInput {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n\n  # Friend request ID to Reject\n  id: String!\n}\n\n# Autogenerated return type of RejectFriend\ntype RejectFriendPayload {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  errors: [String!]!\n  friend: User!\n  friendRequest: FriendRequest\n  user: User!\n}\n\n# Autogenerated input type of RemoveFriend\ninput RemoveFriendInput {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  userId: String!\n}\n\n# Autogenerated return type of RemoveFriend\ntype RemoveFriendPayload {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  errors: [String!]!\n\n  # Current user\n  user: User\n}\n\n# Autogenerated input type of RemoveFromList\ninput RemoveFromListInput {\n  # Achievements to remove\n  achievementIds: [String!]!\n\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n\n  # ID of the list to remove achievements from\n  id: String!\n}\n\n# Autogenerated return type of RemoveFromList\ntype RemoveFromListPayload {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  errors: [String!]!\n  list: List\n}\n\n# Autogenerated input type of RequestCoop\ninput RequestCoopInput {\n  # Achievement to request coop for\n  achievementId: String\n\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n\n  # List to request coop for\n  listId: String\n\n  # User to send request to\n  userId: String!\n}\n\n# Autogenerated return type of RequestCoop\ntype RequestCoopPayload {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  coopRequest: CoopRequest\n  errors: [String!]!\n}\n\ntype Role {\n  createdAt: Int!\n  id: ID!\n  name: String!\n  permissionLevel: String!\n  users: [User!]\n}\n\ntype Unlocked {\n  achievement: Achievement!\n  coop: Boolean!\n  coopBonus: Float!\n  createdAt: Int!\n  id: ID!\n  points: Float!\n  repetitionCount: Int!\n  user: User!\n}\n\n# The connection type for Unlocked.\ntype UnlockedConnection {\n  # A list of edges.\n  edges: [UnlockedEdge]\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n}\n\n# An edge in a connection.\ntype UnlockedEdge {\n  # A cursor for use in pagination.\n  cursor: String!\n\n  # The item at the end of the edge.\n  node: Unlocked\n}\n\n# Autogenerated input type of Update\ninput UpdateInput {\n  categoryId: Int!\n\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  description: String!\n  icon: String!\n  id: String!\n  mode: Mode!\n  name: String!\n  objectives: [ObjectiveInput!]!\n}\n\n# Autogenerated input type of UpdateList\ninput UpdateListInput {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n\n  # ID of the list to update\n  id: String!\n\n  # Whether or not this list should be visible for other users\n  isPublic: Boolean = false\n\n  # Name of the list\n  title: String!\n}\n\n# Autogenerated return type of UpdateList\ntype UpdateListPayload {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  errors: [String!]!\n  list: List\n}\n\n# Autogenerated return type of Update\ntype UpdatePayload {\n  achievement: Achievement\n\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  errors: [String!]!\n}\n\n# Autogenerated input type of Upvote\ninput UpvoteInput {\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  id: String!\n}\n\n# Autogenerated return type of Upvote\ntype UpvotePayload {\n  achievement: Achievement\n\n  # A unique identifier for the client performing the mutation.\n  clientMutationId: String\n  errors: [String!]!\n}\n\ntype User {\n  coopPoints: Int!\n  country: Country!\n  email: String!\n  id: ID!\n  name: String!\n  personalPoints: Float!\n  points: Float!\n  role: Role!\n  unlockedAchievements(\n    # Returns the elements in the list that come after the specified cursor.\n    after: String\n\n    # Returns the elements in the list that come before the specified cursor.\n    before: String\n\n    # Returns the first _n_ elements from the list.\n    first: Int\n\n    # Returns the last _n_ elements from the list.\n    last: Int\n  ): UnlockedConnection!\n  unlockedCount: Int!\n  userAchievements(\n    # Returns the elements in the list that come after the specified cursor.\n    after: String\n\n    # Returns the elements in the list that come before the specified cursor.\n    before: String\n\n    # Returns the first _n_ elements from the list.\n    first: Int\n\n    # Returns the last _n_ elements from the list.\n    last: Int\n  ): AchievementConnection!\n}"];
/* tslint:disable */

export interface Query {
  achievement: Achievement | null;
  achievements: AchievementConnection;
  categories: CategoryConnection;
  continents: ContinentConnection;
  countries: CountryConnection;
  currentUser: User;
  icons: Array<Icon>;
  kinds: Array<Kind>;
  modes: Array<Mode>;
  objectives: ObjectiveConnection;
  regions: RegionConnection;
  user: User;
}

export interface AchievementQueryArgs {
  id: string;
}

export interface AchievementsQueryArgs {
  after: string | null;
  before: string | null;
  category: number | null;
  first: number | null;
  kind: string | null;
  last: number | null;
  mode: number | null;
  multiplayer: boolean | null;
  near: Array<number>;
  type: number | null;
}

export interface CategoriesQueryArgs {
  after: string | null;
  before: string | null;
  first: number | null;
  last: number | null;
}

export interface ContinentsQueryArgs {
  after: string | null;
  before: string | null;
  first: number | null;
  last: number | null;
  search: string | null;
}

export interface CountriesQueryArgs {
  after: string | null;
  before: string | null;
  first: number | null;
  last: number | null;
  search: string | null;
}

export interface ObjectivesQueryArgs {
  after: string | null;
  before: string | null;
  first: number | null;
  last: number | null;
  near: Array<number>;
}

export interface RegionsQueryArgs {
  after: string | null;
  before: string | null;
  first: number | null;
  last: number | null;
  search: string | null;
}

export interface UserQueryArgs {
  id: string;
}

export interface Achievement {
  author: User;
  basePoints: number;
  category: Category;
  expires: number | null;
  fullDescription: string | null;
  hasParents: boolean;
  icon: Icon;
  id: string;
  isGlobal: boolean;
  isMultiPlayer: boolean;
  isSuggestedGlobal: boolean;
  kind: Kind;
  mode: Mode;
  name: string;
  objectives: Array<Objective>;
  points: number;
  shortDescription: string;
}

export interface User {
  coopPoints: number;
  country: Country;
  email: string;
  id: string;
  name: string;
  personalPoints: number;
  points: number;
  role: Role;
  unlockedAchievements: UnlockedConnection;
  unlockedCount: number;
  userAchievements: AchievementConnection;
}

export interface UnlockedAchievementsUserArgs {
  after: string | null;
  before: string | null;
  first: number | null;
  last: number | null;
}

export interface UserAchievementsUserArgs {
  after: string | null;
  before: string | null;
  first: number | null;
  last: number | null;
}

export interface Country {
  id: string;
  name: string;
  region: Region;
}

export interface Region {
  continent: Continent;
  countries: Array<Country>;
  id: string;
  name: string;
}

export interface Continent {
  id: string;
  name: string;
  regions: Array<Region>;
}

export interface Role {
  createdAt: number;
  id: string;
  name: string;
  permissionLevel: string;
  users: Array<User>;
}

export interface UnlockedConnection {
  edges: Array<UnlockedEdge> | null;
  pageInfo: PageInfo;
}

export interface UnlockedEdge {
  cursor: string;
  node: Unlocked | null;
}

export interface Unlocked {
  achievement: Achievement;
  coop: boolean;
  coopBonus: number;
  createdAt: number;
  id: string;
  points: number;
  repetitionCount: number;
  user: User;
}

export interface PageInfo {
  endCursor: string | null;
  hasNextPage: boolean;
  hasPreviousPage: boolean;
  startCursor: string | null;
}

export interface AchievementConnection {
  edges: Array<AchievementEdge> | null;
  pageInfo: PageInfo;
}

export interface AchievementEdge {
  cursor: string;
  node: Achievement | null;
}

export interface Category {
  icon: string;
  id: string;
  points: number;
  title: string;
}

export type Icon = "AIRBALLOON" | "AIRPORT" | "ANCHOR" | "ANVIL" | "BABY_BUGGY" | "BANK" | "BARCODE_SCAN" | "BASEBALL" | "BASKETBALL" | "BEACH" | "BIKE" | "BINOCULARS" | "BONE" | "BOOMBOX" | "BOWLING" | "BOW_TIE" | "BRAIN" | "BRIDGE" | "BRIEFCASE" | "BUDDHISM" | "BUS" | "BUS_CLOCK" | "BUS_DOUBLE_DECKER" | "CAKE" | "CAKE_VARIANT" | "CAMERA" | "CAMERA_IRIS" | "CANDLE" | "CANDYCANE" | "CAR" | "CARAVAN" | "CARDS" | "CARDS_CLUB" | "CARDS_DIAMOND" | "CARDS_HEART" | "CARDS_OUTLINE" | "CARDS_SPADE" | "CARROT" | "CAR_CONVERTIBLE" | "CAR_LIMOUSINE" | "CASH" | "CASSETTE" | "CASTLE" | "CAT" | "CCTV" | "CEILING_LIGHT" | "CERTIFICATE" | "CHESS_KNIGHT" | "CHILI_HOT" | "CHILI_MILD" | "CHIP" | "CHRISTIANITY" | "CHURCH" | "CITY" | "CLOUD" | "COFFEE" | "COFFEE_OUTLINE" | "COFFEE_TO_GO" | "COOKIE" | "CORN" | "COW" | "CRANE" | "CREATION" | "CUBE_OUTLINE" | "CUBE_SEND" | "CUP" | "DUCK" | "DUMBBELL" | "EARTH" | "ELEVATOR" | "ESCALATOR" | "FACE" | "FACTORY" | "FAN" | "FEATHER" | "FIRE_TRUCK" | "FISH" | "FLAG_VARIANT" | "FLOWER" | "FOOTBALL_HELMET" | "FORKLIFT" | "FOUNTAIN" | "GIFT" | "GOLF" | "GONDOLA" | "HAMMER" | "HANGER" | "HEADPHONES" | "HOOK" | "HUMAN_FEMALE" | "HUMAN_MALE" | "HUMAN_MALE_FEMALE" | "ICE_CREAM" | "INCOGNITO" | "INFINITY" | "ISLAM" | "JUDAISM" | "KEY_VARIANT" | "KNIFE_MILITARY" | "LADYBUG" | "LAMP" | "LEAD_PENCIL" | "LEAF" | "LIFEBUOY" | "MAP_OUTLINE" | "MATRIX" | "MOTORBIKE" | "MUFFIN" | "MUSIC" | "NINJA" | "OIL" | "OWL" | "PALETTE" | "PANDA" | "PICKAXE" | "PIER_CRANE" | "PIG" | "PILL" | "PILLAR" | "PINE_TREE" | "PIPE" | "POKEBALL" | "POKER_CHIP" | "POOL" | "POPCORN" | "QRCODE_SCAN" | "RESTAURANT" | "ROAD_VARIANT" | "ROCKET" | "ROUTES" | "RUN" | "SCALE" | "SCALE_BALANCE" | "SEAT_INDIVIDUAL_SUITE" | "SHOWER" | "SIGN_DIRECTION" | "SNOWFLAKE" | "SNOWMAN" | "SOCCER" | "SPRAY" | "STADIUM" | "SUMMIT" | "SUNGLASSES" | "SWIM" | "SWORD" | "TAXI" | "TENNIS" | "TENT" | "TIE" | "TOILET" | "TOOTH" | "TRACTOR" | "TRAIN" | "TRAM" | "TSHIRT_CREW" | "VAN_UTILITY" | "VOICE" | "WATCH" | "WATER" | "WEATHER_SUNSET" | "WORKER" | "YIN_YANG";

export type Kind = "ACTION" | "DISCOVERY" | "LOCATION" | "ROUTE";

export type Mode = "DIFFICULT" | "EASY" | "EXTREME" | "NORMAL";

export interface Objective {
  achievements: Array<Achievement>;
  altitude: number | null;
  basePoints: number;
  country: Country | null;
  createdAt: number;
  hashIdentifier: string;
  id: string;
  isPublic: boolean;
  kind: string;
  lat: number | null;
  lng: number | null;
  requiredCount: number | null;
  tagline: string;
}

export interface CategoryConnection {
  edges: Array<CategoryEdge> | null;
  pageInfo: PageInfo;
}

export interface CategoryEdge {
  cursor: string;
  node: Category | null;
}

export interface ContinentConnection {
  edges: Array<ContinentEdge> | null;
  pageInfo: PageInfo;
}

export interface ContinentEdge {
  cursor: string;
  node: Continent | null;
}

export interface CountryConnection {
  edges: Array<CountryEdge> | null;
  pageInfo: PageInfo;
}

export interface CountryEdge {
  cursor: string;
  node: Country | null;
}

export interface ObjectiveConnection {
  edges: Array<ObjectiveEdge> | null;
  pageInfo: PageInfo;
}

export interface ObjectiveEdge {
  cursor: string;
  node: Objective | null;
}

export interface RegionConnection {
  edges: Array<RegionEdge> | null;
  pageInfo: PageInfo;
}

export interface RegionEdge {
  cursor: string;
  node: Region | null;
}

export interface Mutation {
  acceptCoop: AcceptCoopPayload | null;
  acceptFriend: AcceptFriendPayload | null;
  addFriend: AddFriendPayload | null;
  addToList: AddToListPayload | null;
  authenticateUser: AuthenticateUserPayload | null;
  completeObjective: CompleteObjectivePayload | null;
  createAchievement: CreatePayload | null;
  createList: CreateListPayload | null;
  deleteAchievement: DeletePayload | null;
  downvote: DownvotePayload | null;
  refreshSuggested: RefreshSuggestedPayload | null;
  rejectCoop: RejectCoopPayload | null;
  rejectFriend: RejectFriendPayload | null;
  removeFriend: RemoveFriendPayload | null;
  removeFromList: RemoveFromListPayload | null;
  requestCoop: RequestCoopPayload | null;
  updateAchievement: UpdatePayload | null;
  updateList: UpdateListPayload | null;
  upvote: UpvotePayload | null;
}

export interface AcceptCoopMutationArgs {
  input: AcceptCoopInput;
}

export interface AcceptFriendMutationArgs {
  input: AcceptFriendInput;
}

export interface AddFriendMutationArgs {
  input: AddFriendInput;
}

export interface AddToListMutationArgs {
  input: AddToListInput;
}

export interface AuthenticateUserMutationArgs {
  input: AuthenticateUserInput;
}

export interface CompleteObjectiveMutationArgs {
  input: CompleteObjectiveInput;
}

export interface CreateAchievementMutationArgs {
  input: CreateInput;
}

export interface CreateListMutationArgs {
  input: CreateListInput;
}

export interface DeleteAchievementMutationArgs {
  input: DeleteInput;
}

export interface DownvoteMutationArgs {
  input: DownvoteInput;
}

export interface RefreshSuggestedMutationArgs {
  input: RefreshSuggestedInput;
}

export interface RejectCoopMutationArgs {
  input: RejectCoopInput;
}

export interface RejectFriendMutationArgs {
  input: RejectFriendInput;
}

export interface RemoveFriendMutationArgs {
  input: RemoveFriendInput;
}

export interface RemoveFromListMutationArgs {
  input: RemoveFromListInput;
}

export interface RequestCoopMutationArgs {
  input: RequestCoopInput;
}

export interface UpdateAchievementMutationArgs {
  input: UpdateInput;
}

export interface UpdateListMutationArgs {
  input: UpdateListInput;
}

export interface UpvoteMutationArgs {
  input: UpvoteInput;
}

export interface AcceptCoopInput {
  clientMutationId: string | null;
  id: string;
}

export interface AcceptCoopPayload {
  clientMutationId: string | null;
  coopRequest: CoopRequest | null;
  errors: Array<string>;
}

export interface CoopRequest {
  achievement: Achievement | null;
  createdAt: number;
  id: string;
  isComplete: boolean;
  isPending: boolean;
  list: List | null;
  target: User;
  updatedAt: number;
  user: User;
}

export interface List {
  achievements: Array<Achievement>;
  id: string;
  isPublic: boolean;
  lists: Array<List>;
  title: string;
  user: User;
}

export interface AcceptFriendInput {
  clientMutationId: string | null;
  id: string;
}

export interface AcceptFriendPayload {
  clientMutationId: string | null;
  errors: Array<string>;
  friend: User;
  friendRequest: FriendRequest | null;
  user: User;
}

export interface FriendRequest {
  createdAt: number;
  fromUser: User;
  id: string;
  message: string;
  toUser: User;
  updatedAt: number;
}

export interface AddFriendInput {
  clientMutationId: string | null;
  message: string | null;
  userId: string;
}

export interface AddFriendPayload {
  clientMutationId: string | null;
  errors: Array<string>;
  friendRequest: FriendRequest | null;
  user: User;
}

export interface AddToListInput {
  achievementIds: Array<string>;
  clientMutationId: string | null;
  id: string;
}

export interface AddToListPayload {
  clientMutationId: string | null;
  errors: Array<string>;
  list: List | null;
}

export interface AuthenticateUserInput {
  clientMutationId: string | null;
  id: string;
}

export interface AuthenticateUserPayload {
  clientMutationId: string | null;
  errors: Array<string>;
  user: User | null;
}

export interface CompleteObjectiveInput {
  clientMutationId: string | null;
  coordinates: Array<number>;
  id: string;
  timestamp: number;
}

export interface CompleteObjectivePayload {
  clientMutationId: string | null;
  errors: Array<string>;
  objectiveProgress: ObjectiveProgress | null;
  unlockedAchievements: Array<Unlocked>;
}

export interface ObjectiveProgress {
  completed: boolean;
  createdAt: number;
  id: string;
  objective: Objective;
  timesCompleted: boolean;
  updatedAt: number;
  user: User;
}

export interface CreateInput {
  categoryId: number;
  clientMutationId: string | null;
  description: string;
  icon: Icon;
  mode: Mode;
  name: string;
  objectives: Array<ObjectiveInput>;
}

export interface ObjectiveInput {
  basePoints: number;
  country: string | null;
  id: string | null;
  kind: string;
  lat: number | null;
  lng: number | null;
  requiredCount: number | null;
  tagline: string;
}

export interface CreatePayload {
  achievement: Achievement | null;
  clientMutationId: string | null;
  errors: Array<string>;
}

export interface CreateListInput {
  achievementIds: Array<string>;
  clientMutationId: string | null;
  isPublic: boolean | null;
  title: string;
}

export interface CreateListPayload {
  clientMutationId: string | null;
  errors: Array<string>;
  list: List | null;
}

export interface DeleteInput {
  clientMutationId: string | null;
  id: string;
}

export interface DeletePayload {
  achievement: Achievement | null;
  clientMutationId: string | null;
  errors: Array<string>;
  objectives: Array<Objective>;
}

export interface DownvoteInput {
  clientMutationId: string | null;
  id: string;
}

export interface DownvotePayload {
  achievement: Achievement | null;
  clientMutationId: string | null;
  errors: Array<string>;
}

export interface RefreshSuggestedInput {
  clientMutationId: string | null;
  coordinates: Array<number>;
}

export interface RefreshSuggestedPayload {
  clientMutationId: string | null;
  errors: Array<string>;
  suggested: Array<Achievement>;
}

export interface RejectCoopInput {
  clientMutationId: string | null;
  id: string;
}

export interface RejectCoopPayload {
  clientMutationId: string | null;
  coopRequest: CoopRequest | null;
  errors: Array<string>;
}

export interface RejectFriendInput {
  clientMutationId: string | null;
  id: string;
}

export interface RejectFriendPayload {
  clientMutationId: string | null;
  errors: Array<string>;
  friend: User;
  friendRequest: FriendRequest | null;
  user: User;
}

export interface RemoveFriendInput {
  clientMutationId: string | null;
  userId: string;
}

export interface RemoveFriendPayload {
  clientMutationId: string | null;
  errors: Array<string>;
  user: User | null;
}

export interface RemoveFromListInput {
  achievementIds: Array<string>;
  clientMutationId: string | null;
  id: string;
}

export interface RemoveFromListPayload {
  clientMutationId: string | null;
  errors: Array<string>;
  list: List | null;
}

export interface RequestCoopInput {
  achievementId: string | null;
  clientMutationId: string | null;
  listId: string | null;
  userId: string;
}

export interface RequestCoopPayload {
  clientMutationId: string | null;
  coopRequest: CoopRequest | null;
  errors: Array<string>;
}

export interface UpdateInput {
  categoryId: number;
  clientMutationId: string | null;
  description: string;
  icon: string;
  id: string;
  mode: Mode;
  name: string;
  objectives: Array<ObjectiveInput>;
}

export interface UpdatePayload {
  achievement: Achievement | null;
  clientMutationId: string | null;
  errors: Array<string>;
}

export interface UpdateListInput {
  clientMutationId: string | null;
  id: string;
  isPublic: boolean | null;
  title: string;
}

export interface UpdateListPayload {
  clientMutationId: string | null;
  errors: Array<string>;
  list: List | null;
}

export interface UpvoteInput {
  clientMutationId: string | null;
  id: string;
}

export interface UpvotePayload {
  achievement: Achievement | null;
  clientMutationId: string | null;
  errors: Array<string>;
}
